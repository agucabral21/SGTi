<?php

namespace SGTi\Entity\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SGTiEntityPersonaProxy extends \SGTi\Entity\Persona implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getCi()
    {
        $this->__load();
        return parent::getCi();
    }

    public function setCi($ci)
    {
        $this->__load();
        return parent::setCi($ci);
    }

    public function getNombre()
    {
        $this->__load();
        return parent::getNombre();
    }

    public function setNombre($nombre)
    {
        $this->__load();
        return parent::setNombre($nombre);
    }

    public function getApellido()
    {
        $this->__load();
        return parent::getApellido();
    }

    public function setApellido($apellido)
    {
        $this->__load();
        return parent::setApellido($apellido);
    }

    public function getFechaNac()
    {
        $this->__load();
        return parent::getFechaNac();
    }

    public function setFechaNac($fechaNac)
    {
        $this->__load();
        return parent::setFechaNac($fechaNac);
    }

    public function getTelefono()
    {
        $this->__load();
        return parent::getTelefono();
    }

    public function setTelefono($telefono)
    {
        $this->__load();
        return parent::setTelefono($telefono);
    }

    public function getCelular()
    {
        $this->__load();
        return parent::getCelular();
    }

    public function setCelular($celular)
    {
        $this->__load();
        return parent::setCelular($celular);
    }

    public function getLocalidad()
    {
        $this->__load();
        return parent::getLocalidad();
    }

    public function setLocalidad($localidad)
    {
        $this->__load();
        return parent::setLocalidad($localidad);
    }

    public function getMail()
    {
        $this->__load();
        return parent::getMail();
    }

    public function setMail($mail)
    {
        $this->__load();
        return parent::setMail($mail);
    }

    public function getUsuario()
    {
        $this->__load();
        return parent::getUsuario();
    }

    public function setUsuario($usuario)
    {
        $this->__load();
        return parent::setUsuario($usuario);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'ci', 'nombre', 'apellido', 'fechaNac', 'telefono', 'celular', 'localidad', 'mail', 'usuario');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}